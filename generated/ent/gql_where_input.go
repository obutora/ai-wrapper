// Code generated by ent, DO NOT EDIT.

package ent

import (
	"errors"
	"fmt"
	"time"

	"github.com/obutora/go_graphql_template/generated/ent/dot"
	"github.com/obutora/go_graphql_template/generated/ent/predicate"
)

// DotWhereInput represents a where input for filtering Dot queries.
type DotWhereInput struct {
	Predicates []predicate.Dot  `json:"-"`
	Not        *DotWhereInput   `json:"not,omitempty"`
	Or         []*DotWhereInput `json:"or,omitempty"`
	And        []*DotWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *int  `json:"id,omitempty"`
	IDNEQ   *int  `json:"idNEQ,omitempty"`
	IDIn    []int `json:"idIn,omitempty"`
	IDNotIn []int `json:"idNotIn,omitempty"`
	IDGT    *int  `json:"idGT,omitempty"`
	IDGTE   *int  `json:"idGTE,omitempty"`
	IDLT    *int  `json:"idLT,omitempty"`
	IDLTE   *int  `json:"idLTE,omitempty"`

	// "uid" field predicates.
	UID             *string  `json:"uid,omitempty"`
	UIDNEQ          *string  `json:"uidNEQ,omitempty"`
	UIDIn           []string `json:"uidIn,omitempty"`
	UIDNotIn        []string `json:"uidNotIn,omitempty"`
	UIDGT           *string  `json:"uidGT,omitempty"`
	UIDGTE          *string  `json:"uidGTE,omitempty"`
	UIDLT           *string  `json:"uidLT,omitempty"`
	UIDLTE          *string  `json:"uidLTE,omitempty"`
	UIDContains     *string  `json:"uidContains,omitempty"`
	UIDHasPrefix    *string  `json:"uidHasPrefix,omitempty"`
	UIDHasSuffix    *string  `json:"uidHasSuffix,omitempty"`
	UIDEqualFold    *string  `json:"uidEqualFold,omitempty"`
	UIDContainsFold *string  `json:"uidContainsFold,omitempty"`

	// "title" field predicates.
	Title             *string  `json:"title,omitempty"`
	TitleNEQ          *string  `json:"titleNEQ,omitempty"`
	TitleIn           []string `json:"titleIn,omitempty"`
	TitleNotIn        []string `json:"titleNotIn,omitempty"`
	TitleGT           *string  `json:"titleGT,omitempty"`
	TitleGTE          *string  `json:"titleGTE,omitempty"`
	TitleLT           *string  `json:"titleLT,omitempty"`
	TitleLTE          *string  `json:"titleLTE,omitempty"`
	TitleContains     *string  `json:"titleContains,omitempty"`
	TitleHasPrefix    *string  `json:"titleHasPrefix,omitempty"`
	TitleHasSuffix    *string  `json:"titleHasSuffix,omitempty"`
	TitleEqualFold    *string  `json:"titleEqualFold,omitempty"`
	TitleContainsFold *string  `json:"titleContainsFold,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *DotWhereInput) AddPredicates(predicates ...predicate.Dot) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the DotWhereInput filter on the DotQuery builder.
func (i *DotWhereInput) Filter(q *DotQuery) (*DotQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyDotWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyDotWhereInput is returned in case the DotWhereInput is empty.
var ErrEmptyDotWhereInput = errors.New("ent: empty predicate DotWhereInput")

// P returns a predicate for filtering dots.
// An error is returned if the input is empty or invalid.
func (i *DotWhereInput) P() (predicate.Dot, error) {
	var predicates []predicate.Dot
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, dot.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Dot, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, dot.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Dot, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, dot.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, dot.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, dot.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, dot.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, dot.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, dot.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, dot.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, dot.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, dot.IDLTE(*i.IDLTE))
	}
	if i.UID != nil {
		predicates = append(predicates, dot.UIDEQ(*i.UID))
	}
	if i.UIDNEQ != nil {
		predicates = append(predicates, dot.UIDNEQ(*i.UIDNEQ))
	}
	if len(i.UIDIn) > 0 {
		predicates = append(predicates, dot.UIDIn(i.UIDIn...))
	}
	if len(i.UIDNotIn) > 0 {
		predicates = append(predicates, dot.UIDNotIn(i.UIDNotIn...))
	}
	if i.UIDGT != nil {
		predicates = append(predicates, dot.UIDGT(*i.UIDGT))
	}
	if i.UIDGTE != nil {
		predicates = append(predicates, dot.UIDGTE(*i.UIDGTE))
	}
	if i.UIDLT != nil {
		predicates = append(predicates, dot.UIDLT(*i.UIDLT))
	}
	if i.UIDLTE != nil {
		predicates = append(predicates, dot.UIDLTE(*i.UIDLTE))
	}
	if i.UIDContains != nil {
		predicates = append(predicates, dot.UIDContains(*i.UIDContains))
	}
	if i.UIDHasPrefix != nil {
		predicates = append(predicates, dot.UIDHasPrefix(*i.UIDHasPrefix))
	}
	if i.UIDHasSuffix != nil {
		predicates = append(predicates, dot.UIDHasSuffix(*i.UIDHasSuffix))
	}
	if i.UIDEqualFold != nil {
		predicates = append(predicates, dot.UIDEqualFold(*i.UIDEqualFold))
	}
	if i.UIDContainsFold != nil {
		predicates = append(predicates, dot.UIDContainsFold(*i.UIDContainsFold))
	}
	if i.Title != nil {
		predicates = append(predicates, dot.TitleEQ(*i.Title))
	}
	if i.TitleNEQ != nil {
		predicates = append(predicates, dot.TitleNEQ(*i.TitleNEQ))
	}
	if len(i.TitleIn) > 0 {
		predicates = append(predicates, dot.TitleIn(i.TitleIn...))
	}
	if len(i.TitleNotIn) > 0 {
		predicates = append(predicates, dot.TitleNotIn(i.TitleNotIn...))
	}
	if i.TitleGT != nil {
		predicates = append(predicates, dot.TitleGT(*i.TitleGT))
	}
	if i.TitleGTE != nil {
		predicates = append(predicates, dot.TitleGTE(*i.TitleGTE))
	}
	if i.TitleLT != nil {
		predicates = append(predicates, dot.TitleLT(*i.TitleLT))
	}
	if i.TitleLTE != nil {
		predicates = append(predicates, dot.TitleLTE(*i.TitleLTE))
	}
	if i.TitleContains != nil {
		predicates = append(predicates, dot.TitleContains(*i.TitleContains))
	}
	if i.TitleHasPrefix != nil {
		predicates = append(predicates, dot.TitleHasPrefix(*i.TitleHasPrefix))
	}
	if i.TitleHasSuffix != nil {
		predicates = append(predicates, dot.TitleHasSuffix(*i.TitleHasSuffix))
	}
	if i.TitleEqualFold != nil {
		predicates = append(predicates, dot.TitleEqualFold(*i.TitleEqualFold))
	}
	if i.TitleContainsFold != nil {
		predicates = append(predicates, dot.TitleContainsFold(*i.TitleContainsFold))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, dot.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, dot.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, dot.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, dot.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, dot.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, dot.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, dot.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, dot.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, dot.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, dot.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, dot.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, dot.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, dot.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, dot.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, dot.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, dot.UpdatedAtLTE(*i.UpdatedAtLTE))
	}

	switch len(predicates) {
	case 0:
		return nil, ErrEmptyDotWhereInput
	case 1:
		return predicates[0], nil
	default:
		return dot.And(predicates...), nil
	}
}
