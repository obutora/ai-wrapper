// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/obutora/go_graphql_template/generated/ent/dot"
)

// DotCreate is the builder for creating a Dot entity.
type DotCreate struct {
	config
	mutation *DotMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetUID sets the "uid" field.
func (dc *DotCreate) SetUID(s string) *DotCreate {
	dc.mutation.SetUID(s)
	return dc
}

// SetTitle sets the "title" field.
func (dc *DotCreate) SetTitle(s string) *DotCreate {
	dc.mutation.SetTitle(s)
	return dc
}

// SetCreatedAt sets the "created_at" field.
func (dc *DotCreate) SetCreatedAt(t time.Time) *DotCreate {
	dc.mutation.SetCreatedAt(t)
	return dc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (dc *DotCreate) SetNillableCreatedAt(t *time.Time) *DotCreate {
	if t != nil {
		dc.SetCreatedAt(*t)
	}
	return dc
}

// SetUpdatedAt sets the "updated_at" field.
func (dc *DotCreate) SetUpdatedAt(t time.Time) *DotCreate {
	dc.mutation.SetUpdatedAt(t)
	return dc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (dc *DotCreate) SetNillableUpdatedAt(t *time.Time) *DotCreate {
	if t != nil {
		dc.SetUpdatedAt(*t)
	}
	return dc
}

// Mutation returns the DotMutation object of the builder.
func (dc *DotCreate) Mutation() *DotMutation {
	return dc.mutation
}

// Save creates the Dot in the database.
func (dc *DotCreate) Save(ctx context.Context) (*Dot, error) {
	dc.defaults()
	return withHooks(ctx, dc.sqlSave, dc.mutation, dc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (dc *DotCreate) SaveX(ctx context.Context) *Dot {
	v, err := dc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dc *DotCreate) Exec(ctx context.Context) error {
	_, err := dc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dc *DotCreate) ExecX(ctx context.Context) {
	if err := dc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dc *DotCreate) defaults() {
	if _, ok := dc.mutation.CreatedAt(); !ok {
		v := dot.DefaultCreatedAt()
		dc.mutation.SetCreatedAt(v)
	}
	if _, ok := dc.mutation.UpdatedAt(); !ok {
		v := dot.DefaultUpdatedAt()
		dc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dc *DotCreate) check() error {
	if _, ok := dc.mutation.UID(); !ok {
		return &ValidationError{Name: "uid", err: errors.New(`ent: missing required field "Dot.uid"`)}
	}
	if _, ok := dc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "Dot.title"`)}
	}
	if _, ok := dc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Dot.created_at"`)}
	}
	if _, ok := dc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Dot.updated_at"`)}
	}
	return nil
}

func (dc *DotCreate) sqlSave(ctx context.Context) (*Dot, error) {
	if err := dc.check(); err != nil {
		return nil, err
	}
	_node, _spec := dc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	dc.mutation.id = &_node.ID
	dc.mutation.done = true
	return _node, nil
}

func (dc *DotCreate) createSpec() (*Dot, *sqlgraph.CreateSpec) {
	var (
		_node = &Dot{config: dc.config}
		_spec = sqlgraph.NewCreateSpec(dot.Table, sqlgraph.NewFieldSpec(dot.FieldID, field.TypeInt))
	)
	_spec.OnConflict = dc.conflict
	if value, ok := dc.mutation.UID(); ok {
		_spec.SetField(dot.FieldUID, field.TypeString, value)
		_node.UID = value
	}
	if value, ok := dc.mutation.Title(); ok {
		_spec.SetField(dot.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := dc.mutation.CreatedAt(); ok {
		_spec.SetField(dot.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := dc.mutation.UpdatedAt(); ok {
		_spec.SetField(dot.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Dot.Create().
//		SetUID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.DotUpsert) {
//			SetUID(v+v).
//		}).
//		Exec(ctx)
func (dc *DotCreate) OnConflict(opts ...sql.ConflictOption) *DotUpsertOne {
	dc.conflict = opts
	return &DotUpsertOne{
		create: dc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Dot.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (dc *DotCreate) OnConflictColumns(columns ...string) *DotUpsertOne {
	dc.conflict = append(dc.conflict, sql.ConflictColumns(columns...))
	return &DotUpsertOne{
		create: dc,
	}
}

type (
	// DotUpsertOne is the builder for "upsert"-ing
	//  one Dot node.
	DotUpsertOne struct {
		create *DotCreate
	}

	// DotUpsert is the "OnConflict" setter.
	DotUpsert struct {
		*sql.UpdateSet
	}
)

// SetUID sets the "uid" field.
func (u *DotUpsert) SetUID(v string) *DotUpsert {
	u.Set(dot.FieldUID, v)
	return u
}

// UpdateUID sets the "uid" field to the value that was provided on create.
func (u *DotUpsert) UpdateUID() *DotUpsert {
	u.SetExcluded(dot.FieldUID)
	return u
}

// SetTitle sets the "title" field.
func (u *DotUpsert) SetTitle(v string) *DotUpsert {
	u.Set(dot.FieldTitle, v)
	return u
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *DotUpsert) UpdateTitle() *DotUpsert {
	u.SetExcluded(dot.FieldTitle)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *DotUpsert) SetCreatedAt(v time.Time) *DotUpsert {
	u.Set(dot.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *DotUpsert) UpdateCreatedAt() *DotUpsert {
	u.SetExcluded(dot.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *DotUpsert) SetUpdatedAt(v time.Time) *DotUpsert {
	u.Set(dot.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *DotUpsert) UpdateUpdatedAt() *DotUpsert {
	u.SetExcluded(dot.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Dot.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *DotUpsertOne) UpdateNewValues() *DotUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Dot.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *DotUpsertOne) Ignore() *DotUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *DotUpsertOne) DoNothing() *DotUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the DotCreate.OnConflict
// documentation for more info.
func (u *DotUpsertOne) Update(set func(*DotUpsert)) *DotUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&DotUpsert{UpdateSet: update})
	}))
	return u
}

// SetUID sets the "uid" field.
func (u *DotUpsertOne) SetUID(v string) *DotUpsertOne {
	return u.Update(func(s *DotUpsert) {
		s.SetUID(v)
	})
}

// UpdateUID sets the "uid" field to the value that was provided on create.
func (u *DotUpsertOne) UpdateUID() *DotUpsertOne {
	return u.Update(func(s *DotUpsert) {
		s.UpdateUID()
	})
}

// SetTitle sets the "title" field.
func (u *DotUpsertOne) SetTitle(v string) *DotUpsertOne {
	return u.Update(func(s *DotUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *DotUpsertOne) UpdateTitle() *DotUpsertOne {
	return u.Update(func(s *DotUpsert) {
		s.UpdateTitle()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *DotUpsertOne) SetCreatedAt(v time.Time) *DotUpsertOne {
	return u.Update(func(s *DotUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *DotUpsertOne) UpdateCreatedAt() *DotUpsertOne {
	return u.Update(func(s *DotUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *DotUpsertOne) SetUpdatedAt(v time.Time) *DotUpsertOne {
	return u.Update(func(s *DotUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *DotUpsertOne) UpdateUpdatedAt() *DotUpsertOne {
	return u.Update(func(s *DotUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *DotUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for DotCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *DotUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *DotUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *DotUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// DotCreateBulk is the builder for creating many Dot entities in bulk.
type DotCreateBulk struct {
	config
	err      error
	builders []*DotCreate
	conflict []sql.ConflictOption
}

// Save creates the Dot entities in the database.
func (dcb *DotCreateBulk) Save(ctx context.Context) ([]*Dot, error) {
	if dcb.err != nil {
		return nil, dcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(dcb.builders))
	nodes := make([]*Dot, len(dcb.builders))
	mutators := make([]Mutator, len(dcb.builders))
	for i := range dcb.builders {
		func(i int, root context.Context) {
			builder := dcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DotMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = dcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dcb *DotCreateBulk) SaveX(ctx context.Context) []*Dot {
	v, err := dcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dcb *DotCreateBulk) Exec(ctx context.Context) error {
	_, err := dcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dcb *DotCreateBulk) ExecX(ctx context.Context) {
	if err := dcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Dot.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.DotUpsert) {
//			SetUID(v+v).
//		}).
//		Exec(ctx)
func (dcb *DotCreateBulk) OnConflict(opts ...sql.ConflictOption) *DotUpsertBulk {
	dcb.conflict = opts
	return &DotUpsertBulk{
		create: dcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Dot.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (dcb *DotCreateBulk) OnConflictColumns(columns ...string) *DotUpsertBulk {
	dcb.conflict = append(dcb.conflict, sql.ConflictColumns(columns...))
	return &DotUpsertBulk{
		create: dcb,
	}
}

// DotUpsertBulk is the builder for "upsert"-ing
// a bulk of Dot nodes.
type DotUpsertBulk struct {
	create *DotCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Dot.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *DotUpsertBulk) UpdateNewValues() *DotUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Dot.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *DotUpsertBulk) Ignore() *DotUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *DotUpsertBulk) DoNothing() *DotUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the DotCreateBulk.OnConflict
// documentation for more info.
func (u *DotUpsertBulk) Update(set func(*DotUpsert)) *DotUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&DotUpsert{UpdateSet: update})
	}))
	return u
}

// SetUID sets the "uid" field.
func (u *DotUpsertBulk) SetUID(v string) *DotUpsertBulk {
	return u.Update(func(s *DotUpsert) {
		s.SetUID(v)
	})
}

// UpdateUID sets the "uid" field to the value that was provided on create.
func (u *DotUpsertBulk) UpdateUID() *DotUpsertBulk {
	return u.Update(func(s *DotUpsert) {
		s.UpdateUID()
	})
}

// SetTitle sets the "title" field.
func (u *DotUpsertBulk) SetTitle(v string) *DotUpsertBulk {
	return u.Update(func(s *DotUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *DotUpsertBulk) UpdateTitle() *DotUpsertBulk {
	return u.Update(func(s *DotUpsert) {
		s.UpdateTitle()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *DotUpsertBulk) SetCreatedAt(v time.Time) *DotUpsertBulk {
	return u.Update(func(s *DotUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *DotUpsertBulk) UpdateCreatedAt() *DotUpsertBulk {
	return u.Update(func(s *DotUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *DotUpsertBulk) SetUpdatedAt(v time.Time) *DotUpsertBulk {
	return u.Update(func(s *DotUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *DotUpsertBulk) UpdateUpdatedAt() *DotUpsertBulk {
	return u.Update(func(s *DotUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *DotUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the DotCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for DotCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *DotUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
